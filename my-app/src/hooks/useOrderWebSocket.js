import { useEffect, useRef, useState } from "react";
import SockJS from "sockjs-client";
import { Stomp } from "@stomp/stompjs";

export default function useOrderWebSocketAndFetch(storeId) {
  const [orderData, setOrderData] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const clientRef = useRef(null);

  useEffect(() => {
    const socket = new SockJS("http://localhost:8080/ws");
    const client = Stomp.over(socket);
    clientRef.current = client;

    client.connect(
      {},
      async () => {
        console.log("‚úÖ WebSocket connected");
        setIsConnected(true);

        // ‚úÖ Ïó∞Í≤∞ ÏÑ±Í≥µ ÌõÑ GET ÏöîÏ≤≠ Ïã§Ìñâ
        try {
          const res = await fetch(
            `http://localhost:8080/api/orders/active?storeId=${storeId}`,
            {
              method: "GET",
              credentials: "include",
            }
          );

          if (!res.ok) throw new Error("Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®");

          const data = await res.json();
          console.log("üì¶ Ï¥àÍ∏∞ Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞:", data);
          setOrderData(data);
        } catch (err) {
          console.error("‚ùå Ï¥àÍ∏∞ Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Ïò§Î•ò:", err);
        }

        // ‚úÖ Ïù¥ÌõÑÏóê WebSocket Íµ¨ÎèÖÎèÑ Í∞ÄÎä•
        client.subscribe(`/topic/orders/${storeId}`, (message) => {
          try {
            const payload = JSON.parse(message.body);
            console.log("üì® Î∞õÏùÄ Ïã§ÏãúÍ∞Ñ Î©îÏãúÏßÄ:", payload);
            setOrderData(payload);
          } catch (err) {
            console.error("‚ùå Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:", err);
          }
        });
      },
      (error) => {
        console.error("‚ùå WebSocket Ïó∞Í≤∞ Ïã§Ìå®:", error);
      }
    );

    return () => {
      if (clientRef.current) {
        clientRef.current.disconnect(() => {
          console.log("‚ùå WebSocket disconnected");
        });
      }
    };
  }, [storeId]);

  return { orderData, isConnected };
}
